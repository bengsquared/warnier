{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Block","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isChild","name","kids","title","children","state","currentChildren","newprops","id","dt","Date","getTime","replace","c","r","Math","random","floor","toString","create_UUID","push","console","log","NotifyParent","setState","childArray","j","length","i","_this2","map","child","react_default","a","createElement","key","ChildChange","className","onClick","AddChild","React","Component","App","App_Block","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d0ca94a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\n\nclass Block extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        if(!props.isChild){\n            let name = \"\";\n            let kids = [];\n            if (props.title){\n                name = props.title;\n            } \n            if (props.children){\n                kids = props.children;\n            }\n            this.state = {\n              title:name,\n              children:kids,\n            };\n        }\n    }\n    \n    \n    AddChild(){\n        let currentChildren = this.props.children;\n        let newID = create_UUID();\n        let newprops = {\n            id:newID,\n            title:\"new block\",\n            children:[]\n        }\n        currentChildren.push(newprops);\n        console.log(currentChildren);\n        if(!this.props.isChild){\n            this.setState({\n                children:  currentChildren,\n            });\n        } else {\n            this.props.NotifyParent(this.props.id,this.props.title,currentChildren);\n        }\n    }\n    \n    ChildChange(id,title,childArray){\n        let children=[];\n        if(!this.props.isChild){\n            children = this.state.children;\n        } else {\n            children = this.props.children;\n        }\n        let j = children.length;\n        for(var i = 0; i < j;i++){\n            if (id === children[i].id){\n                children[i]={\n                    id:id,\n                    title:title,\n                    children:childArray\n                }\n                break;\n            }\n        }\n            \n        if(!this.props.isChild){\n            this.setState({\n                children:children,\n            });\n        } else {\n            this.props.NotifyParent(this.props.id,this.props.title,children);\n        }\n    }\n    \n    \n    render(){\n        let children = [];\n        let title = \"\";\n        if(!this.props.isChild){\n            children = this.state.children;\n            title = this.state.title;\n        } else {\n            children = this.props.children;\n            title = this.props.title;\n        }\n        const kids = children.map((child) => \n            <Block key={child.id} id={child.id} isChild={true} children={child.children} title={child.title} NotifyParent={() => this.ChildChange()} />\n        );\n        \n        return(\n            <div className=\"blockBox\">\n                <div className=\"blockInfo\">\n                    <div className=\"blockTitle\"><input></input></div>\n                </div>\n                <div className=\"brace\"> </div>\n                \n                <div className=\"children\">\n                    {kids}\n                    <div className=\"addChild\" onClick={() => this.AddChild()}>add child</div>\n                </div>\n            </div>\n        );\n    }\n    \n    \n    \n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Warnier-Orr Generator</h1>\n      <Block isChild={false} children={[]} title=\"Parent\"   />\n    </div>\n  );\n}\n\nfunction create_UUID(){\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (dt + Math.random()*16)%16 | 0;\n        dt = Math.floor(dt/16);\n        return (c=='x' ? r :(r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}